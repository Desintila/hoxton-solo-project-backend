// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  firstName        String
  lastName         String
  email            String             @unique
  password         String
  image            String
  subscribedBy     User[]             @relation("UserSubscribe", references: [id])
  subscribing      User[]             @relation("UserSubscribe", references: [id])
  videos           Video[]
  comments         Comment[]
  video_likes      video_likes[]
  comment_likes    comment_likes[]
  video_dislikes   video_dislikes[]
  comment_dislikes comment_dislikes[]
  watch_later      watch_later[]
  Video_Views      Video_Views[]
  notifications    Notification[]
}

model Video {
  id             Int              @id @default(autoincrement())
  user           User             @relation(fields: [userId], references: [id])
  userId         Int
  title          String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  description    String
  url            String
  thumbnail      String
  comments       Comment[]
  video_likes    video_likes[]
  video_dislikes video_dislikes[]
  watch_later    watch_later[]
  Video_Views    Video_Views[]
}

model Comment {
  id               Int                @id @default(autoincrement())
  user             User               @relation(fields: [userId], references: [id])
  userId           Int
  video            Video              @relation(fields: [videoId], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  commentText      String
  videoId          Int
  comment_likes    comment_likes[]
  comment_dislikes comment_dislikes[]
}

model video_likes {
  id      Int   @id @default(autoincrement())
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  video   Video @relation(fields: [videoId], references: [id])
  videoId Int
}

model video_dislikes {
  id      Int   @id @default(autoincrement())
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  video   Video @relation(fields: [videoId], references: [id])
  videoId Int
}

model comment_likes {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId Int
}

model comment_dislikes {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId Int
}

model watch_later {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  videoId   Int
}

model Video_Views {
  id      Int   @id @default(autoincrement())
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  video   Video @relation(fields: [videoId], references: [id])
  videoId Int
}

model Notification {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  dateCreated DateTime @default(now())
  message     String
  seen        Boolean  @default(false)
}
